unit Relationship;

interface

uses
  Classes, SysUtils, grobal2, Windows, HUtil32;

const
  MAX_LOVERCOUNT = 1;
  STR_LOVER = '갖훙         : ';
  STR_LOVER_STARTDAY = '써삯휑퍅     : ';
  STR_LOVER_DAYCOUNT = '써삯莖鑒     : ';

type
  TRelationShipInfo = class
  private
    FOwnner: string;   // 소유자 이름
    FName: string;   // 등록자 이름
    FState: BYTE;     // 등록상태
    FLevel: BYTE;     // 레벨
    FSex: BYTE;     // 성별
    FDate: string;   // 등록날짜
    FServerDate: string;   // 서버날짜
    FMapInfo: string;   // 맵정보

  public
    constructor Create;
    destructor Destroy; override;

        // 내부 멤버접근용 프로퍼티
    property Ownner: string read FOwnner write FOwnner;
    property Name: string read FName write FName;
    property State: BYTE read FState write FState;
    property Level: BYTE read FLevel write FLevel;
    property Sex: BYTE read FSex write FSex;
    property Date: string read FDate write FDate;
    property ServerDate: string read FServerDate write FServerDate;
    property MapInfo: string read FMapInfo write FMapInfo;
  end;

  PTRelationShipInfo = ^TRelationShipInfo;

  TRelationShipMgr = class
  private
    FItems: TList;
    FEnableJoinLover: Boolean;
    FReqSequence: Integer;
    FCancelTime: LongWord;
    FLoverCount: Integer;
    fDisplayStr: TStringList;
    procedure RemoveAll;
    function GetReqSequence: Integer;
    procedure SetReqSequence(Sequence: integer);
    function GetDayStr(datestr: string; delimeter: string): string;
    function GetDayNow(datestr: string; serverdatestr: string): string;
  public
    constructor Create;
    destructor Destroy; override;
    procedure Clear;

    function GetInfo(Name_: string; var Info_: TRelationShipInfo): Boolean;
    function Find(Name_: string): Boolean;
    function Add(Ownner_: string; Other_: string; State_: BYTE; Level_: BYTE; Sex_: BYTE; Date_: string; ServerDate_: string; MapInfo_: string): Boolean;
    function Delete(Name_: string): Boolean;
    function ChangeLevel(Name_: string; Level_: BYTE): Boolean;
    function GetEnableJoin(ReqType: integer): Boolean;
    function GetEnableJoinReq(ReqType: integer): Boolean;
    procedure SetEnable(ReqType: integer; Enable: integer);
    function GetEnable(ReqType: integer): Integer;
    function GetDisplay(Line: Integer): string;
    function GetName(ReqType: integer): string;

    procedure MakeDisplay;
    property ReqSequence: Integer read GetReqSequence write SetReqSequence;
  end;

implementation

// TRealtionShipInfo ===========================================================
constructor TRelationShipInfo.Create;
begin
  inherited;
    //TO DO Initialize
  FOwnner := '';
  FName := '';
  FState := 0;
  FLevel := 0;
  FSex := 0;
  FDate := '';
  FServerDate := '';
  FMapInfo := '';
end;

destructor TRelationShipInfo.Destroy;
begin
    // TO DO Free Mem
  inherited;
end;

// TRealtionShipMgr ============================================================
constructor TRelationShipMgr.Create;
begin
  inherited;
    //TO DO Initialize
  FItems := TList.Create;
  fDisplayStr := TStringList.Create;
end;

destructor TRelationShipMgr.Destroy;
begin
    // TO DO Free Mem
  RemoveAll;
  FItems.Free;

  fDisplayStr.Free;
  inherited;
end;

procedure TRelationShipMgr.Clear;
begin
  RemoveAll;
  FEnableJoinLover := False;
  FReqSequence := rsReq_None;
  FCancelTime := 0;
  FLoverCount := 0;
  fDisplayStr.Clear;

  MakeDisplay;
end;

procedure TRelationShipMgr.RemoveAll;
var
  Info: TRelationShipInfo;
  i: integer;
begin
  for i := 0 to FItems.count - 1 do
  begin
    Info := FItems[i];

    if (Info <> nil) then
    begin
      Info.Free;
      Info := nil;
    end;
  end;
  FItems.Clear;
end;

function TrelationShipMgr.GetReqSequence: Integer;
begin
  if (FcancelTime = 0) or ((GetTickCount - FCancelTime) <= MAX_WAITTIME) then
  begin
    ;
  end
  else
  begin
    FReqSequence := RsReq_None;
  end;

  Result := FReqSequence;
end;

procedure TrelationShipMgr.SetReqSequence(Sequence: integer);
begin
  if (FCancelTime = 0) or ((GetTickCount - FCancelTime) <= MAX_WAITTIME) then
  begin
    FReqSequence := Sequence;
  end
  else
  begin
    FReqSequence := RsReq_None;
  end;
  FCancelTime := GetTickCount;
end;

function TrelationShipMgr.GetDayStr(datestr: string; delimeter: string): string;
begin
  Result := '';
  if length(datestr) >= 6 then
  begin
    Result := '20' + datestr[1] + datestr[2] + delimeter + datestr[3] + datestr[4] + delimeter + datestr[5] + datestr[6];
  end;

end;

{function TrelationShipMgr.GetDayNow( datestr: string ; serverdatestr :string):string;
var
    date        : TDateTime;
    serverdate  : TDateTime;
begin

    date        := StrToDate( GetDayStr( datestr        , '-') );
    serverdate  := StrToDate( GetDayStr( serverdatestr  , '-') );

    Result := IntTostr ( Trunc( serverdate - date )+1 );

end;}

function TRelationShipMgr.GetDayNow(datestr: string; serverdatestr: string): string;
var
//    date        : TDateTime;
//    serverdate  : TDateTime;
  str, strtemp: string;
  exdate, extime, exdatetime, exdatetime2: TDateTime;
  cYear, cMon, cDay, cHour, cMin, cSec, cMSec: word;
begin
  Result := '0';
//      exit;
  try
    str := GetDayStr(datestr, '-');

    str := GetValidStr3(str, strtemp, ['-']);
    cYear := WORD(StrToInt(strtemp));
    str := GetValidStr3(str, strtemp, ['-']);
    cMon := WORD(StrToInt(strtemp));
    cDay := WORD(StrToInt(str));

    cHour := 0;
    cMin := 0;
    cSec := 0;
    cMSec := 0;

    exdate := Trunc(EncodeDate(cYear, cMon, cDay));
    extime := EncodeTime(cHour, cMin, cSec, cMSec);
    exdatetime := exdate + extime + 1;

    str := GetDayStr(serverdatestr, '-');

    str := GetValidStr3(str, strtemp, ['-']);
    cYear := WORD(StrToInt(strtemp));
    str := GetValidStr3(str, strtemp, ['-']);
    cMon := WORD(StrToInt(strtemp));
    cDay := WORD(StrToInt(str));

    cHour := 0;
    cMin := 0;
    cSec := 0;
    cMSec := 0;

    exdate := Trunc(EncodeDate(cYear, cMon, cDay));
    extime := EncodeTime(cHour, cMin, cSec, cMSec);
    exdatetime2 := exdate + extime + 1;

    Result := IntTostr(Trunc(exdatetime2 - exdatetime) + 1);
  except
    Result := '0';
  end;
//    date        := StrToDate( GetDayStr( datestr        , '-') );
//    serverdate  := StrToDate( GetDayStr( serverdatestr  , '-') );
//    Result := IntTostr ( Trunc( serverdate - date ) + 1 );
end;

procedure TrelationShipMgr.MakeDisplay;
var
  Info: TRelationShipInfo;
  i: integer;
begin
  fDisplayStr.Clear;
  fDisplayStr.Add(STR_LOVER);
  fDisplayStr.Add(STR_LOVER_STARTDAY);
  fDisplayStr.Add(STR_LOVER_DAYCOUNT);

  for i := 0 to FItems.Count - 1 do
  begin
    Info := Fitems[i];
    if Info <> nil then
    begin
      if Info.State = RsState_Lover then
      begin
        fDisplayStr[0] := STR_LOVER + Info.Name;
        fDisplayStr[1] := STR_LOVER_STARTDAY + GetDayStr(Info.Date, '/');
        fDisplayStr[2] := STR_LOVER_DAYCOUNT + GetDayNow(Info.Date, Info.ServerDate);
      end;
    end;
  end;

end;

function TrelationShipMgr.GetEnableJoin(ReqType: integer): Boolean;
begin
  Result := false;

  case ReqType of
    RsState_Lover:
      if fEnableJoinLover and (fLoverCount < MAX_LOVERCOUNT) then
        Result := true;
  end;

end;

function TrelationShipMgr.GetEnableJoinReq(ReqType: integer): Boolean;
begin
  Result := false;

  case ReqType of
    RsState_Lover:
      if fEnableJoinLover and (fLoverCount < MAX_LOVERCOUNT) then
        Result := true;
  end;
end;

procedure TrelationShipMgr.SetEnable(ReqType: integer; enable: integer);
begin
  case ReqType of
    RsState_Lover:
      begin
        if enable = 1 then
          FEnableJoinLover := true
        else
          FEnableJoinLover := false;
      end;
  end;
end;

function TrelationShipMgr.GetEnable(ReqType: integer): Integer;
begin
  Result := 0;

  case ReqType of
    RsState_Lover:
      begin
        if FEnableJoinLover then
          Result := 1
        else
          Result := 0;
      end;
  end;
end;

function TrelationShipMgr.GetDisplay(Line: integer): string;
begin
  Result := '';
  if fDisplayStr.Count > Line then
    Result := fDisplayStr[Line];
end;

function TrelationShipMgr.GetName(ReqType: integer): string;
var
  Info: TRelationShipInfo;
  i: integer;
begin
  Result := '';
  for i := 0 to fItems.Count - 1 do
  begin
    Info := FITems[i];
    if (Info <> nil) and (Info.State = ReqType) then
    begin
      Result := Info.Name;
      Exit;
    end;
  end;
end;

// Get Infomation...
function TrelationShipMgr.GetInfo(Name_: string; var Info_: TRelationShipInfo): Boolean;
var
  i: integer;
  Info: TrelationShipInfo;
begin
  result := False;
  Info_ := nil;

  for i := 0 to FItems.Count - 1 do
  begin
    Info := FItems[i];
    if (Info <> nil) and (Info.Name = Name_) then
    begin
      Info_ := Info;
      Result := true;
      Exit;
    end;
  end;
end;

function TRelationShipMgr.Find(Name_: string): Boolean;
var
  Info: TRelationShipInfo;
begin
  Result := GetInfo(Name_, Info);
end;

function TRelationShipMgr.Add(Ownner_: string; Other_: string; State_: BYTE; Level_: BYTE; Sex_: BYTE; Date_: string; ServerDate_: string; MapInfo_: string): Boolean;
var
  Info: TRelationShipInfo;
begin
  Result := false;

  if (Ownner_ = '') or (Other_ = '') or (Level_ = 0) then
    Exit;

  if (Date_ = '') then
  begin
    Date_ := FormatDateTime('yymmddhhnn', Now);
  end;

  Info := nil;
  if not Find(Other_) then
  begin
    Info := TRelationShipInfo.Create;

    Info.Ownner := Ownner_;
    Info.Name := Other_;
    Info.State := State_;
    Info.Level := Level_;
    Info.Sex := Sex_;
    Info.Date := Date_;
    Info.ServerDate := ServerDate_;
    Info.Mapinfo := MapInfo_;

    FItems.Add(Info);

    case State_ of
      RsState_Lover:
        inc(fLoverCount);
    end;

    Result := true;
    MakeDisplay;
  end;
end;

function TRelationShipMgr.Delete(Name_: string): Boolean;
var
  Info: TRelationShipInfo;
  i: integer;
begin
  Result := false;

  for i := 0 to FItems.Count - 1 do
  begin
    Info := FItems[i];
    if (Info <> nil) and (Info.Name = Name_) then
    begin
      Info.Free;
      Info := Nil;
      FItems.Delete(i);
      result := true;
      MakeDisplay;
      Exit;
    end;
  end;

end;

function TRelationShipMgr.ChangeLevel(Name_: string; Level_: BYTE): Boolean;
var
  Info: TRelationShipInfo;
begin
  Result := false;

  if Level_ > 0 then
  begin
    if GetInfo(Name_, Info) then
    begin
      if Info <> nil then
      begin
        Info.Level := Level_;
        Result := true;
        MakeDisplay;
      end;
    end;
  end;
end;

end.

