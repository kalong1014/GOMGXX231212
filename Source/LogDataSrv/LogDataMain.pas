unit LogDataMain;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, SyncObjs, Controls, Forms, Dialogs, StdCtrls,
  ExtCtrls, IniFiles, IdBaseComponent, IdComponent, IdUDPBase, IdUDPServer, IdSocketHandle,
  IdGlobal, Menus, DB, ADODB;
type
  TFrmLogData = class(TForm)
    Label3: TLabel;
    Label4: TLabel;
    Timer1: TTimer;
    IdUDPServerLog: TIdUDPServer;
    StartTimer: TTimer;
    MainMenu: TMainMenu;
    MainMenu_LogData: TMenuItem;
    CloseTimer: TTimer;
    AdoCon: TADOConnection;
    AdoQry: TADOQuery;
    

    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure Timer1Timer(Sender: TObject);
    procedure WriteLogFile();
    procedure WriteLogSql();

    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure StartTimerTimer(Sender: TObject);
    procedure MainMenu_LogDataClick(Sender: TObject);
    procedure CloseTimerTimer(Sender: TObject);
    //procedure est1Click(Sender: TObject);
    procedure IdUDPServerLogUDPRead(AThread: TIdUDPListenerThread; const AData: TIdBytes; ABinding: TIdSocketHandle);


  private
    LogMsgList: TStringList;
    m_boRemoteClose: Boolean;
    boIsRaedLog : Boolean;

    FConnFile   : TStringList;
    FConnInfo   : string;
    SQLock: TCriticalSection;   // SQL Engine Thread
    function connectdb:Boolean;
    { Private declarations }
  public
    procedure MyMessage(var MsgData: TWmCopyData); message WM_COPYDATA;
    { Public declarations }
  end;

var
  FrmLogData: TFrmLogData;
  {This file is generated by DeDe Ver 3.50.02 Copyright (c) 1999-2002 DaFixer}

implementation

uses LDShare, Grobal2, HUtil32, LogManage;

{$R *.DFM}

procedure TFrmLogData.FormCreate(Sender: TObject);
var
  Conf: TIniFile;
  nX, nY: Integer;
begin
  g_dwGameCenterHandle := Str_ToInt(ParamStr(1), 0);
  nX := Str_ToInt(ParamStr(2), -1);
  nY := Str_ToInt(ParamStr(3), -1);
  if (nX >= 0) or (nY >= 0) then begin
    Left := nX;
    Top := nY;
  end;

  m_boRemoteClose := False;
  SendGameCenterMsg(SG_FORMHANDLE, IntToStr(Self.Handle));
  SendGameCenterMsg(SG_STARTNOW, '正在启动日志服务器...');

  SQLock       := TCriticalSection.Create;
  LogMsgList := TStringList.Create;
  FConnFile  := TStringList.Create;

  if not connectdb then begin
    ShowMessage('数据库联接过程中出现错误,启动失败.');
  end;

  StartTimer.Enabled := True;
end;

procedure TFrmLogData.FormDestroy(Sender: TObject);
begin
  SQLock.Free;
  LogMsgList.Free;
  FConnFile.Free;
end;

procedure TFrmLogData.IdUDPServerLogUDPRead(AThread: TIdUDPListenerThread;
  const AData: TIdBytes; ABinding: TIdSocketHandle);
var
  LogStr: String;

begin
  try
    SQLock.Enter;
    boIsRaedLog:= True;

    SetLength(LogStr, Length(AData));
    Move(AData[0], LogStr[1], Length(AData));
    LogMsgList.Add(LogStr);
    boIsRaedLog:= False;
    SQLock.Leave;
  except
    SQLock.Leave;
    boIsRaedLog:= False;
  end;
end;
procedure TFrmLogData.CloseTimerTimer(Sender: TObject);
begin
  Caption := '正在关闭...';
  if SearchStatus then QuitFlag := True else Close;
end;

procedure TFrmLogData.FormCloseQuery(Sender: TObject;
  var CanClose: Boolean);
begin
  if m_boRemoteClose then exit;
  if Application.MessageBox('是否确认退出服务器？',
    '提示信息',
    MB_YESNO + MB_ICONQUESTION) = IDYES then begin
    m_boRemoteClose := True;
    CloseTimer.Enabled := True;
  end else CanClose := False;
end;

procedure TFrmLogData.Timer1Timer(Sender: TObject);
begin
//  WriteLogFile();
  WriteLogSql();
end;

procedure TFrmLogData.WriteLogFile();
var
  I: Integer;
  Year, Month, Day, Hour, Min, Sec, MSec: Word;
  sLogDir, sLogFile: string;
  s2E8: string;
  F: TextFile;
begin
  if LogMsgList.Count <= 0 then exit;
  DecodeDate(Date, Year, Month, Day);
  DecodeTime(Time, Hour, Min, Sec, MSec); //ExtractFilePath(ParamStr(0)) +
  sLogDir := sBaseDir + IntToStr(Year) + '-' + IntToString(Month) + '-' + IntToString(Day);
  if not DirectoryExists(sLogDir) then begin
    //CreateDirectoryA(PChar(sLogDir), nil);
    SysUtils.ForceDirectories(sLogDir);
  end;
  sLogFile := sLogDir + '\Log-' + IntToString(Hour) + 'h' + IntToString((Min div 10) * 2) + 'm.txt';
  Label4.Caption := sLogFile;
  try
    AssignFile(F, sLogFile);
    if not FileExists(sLogFile) then Rewrite(F)
    else Append(F);
    for I := 0 to LogMsgList.Count - 1 do begin
      Writeln(F, LogMsgList.Strings[I] + #9 + FormatDateTime('yyyy-mm-dd hh:mm:ss', Now));
      Flush(F)
    end;
//    LogMsgList.Clear;
  finally
    CloseFile(F);
  end;
end;

procedure TFrmLogData.WriteLogSql();
var
  I: Integer;
  Year, Month, Day, Hour, Min, Sec, MSec: Word;
  Data, tmp: string;
  sAction,
  sMapName,
  sXX,
  sYY,
  sUserName,
  sItemName,
  sMakeIndex,
  sOpt1,
  sOpt2,
  sTime : string;
begin
  if LogMsgList.Count <= 0 then exit;
  Timer1.Enabled := False;
  DecodeDate(Date, Year, Month, Day);
  DecodeTime(Time, Hour, Min, Sec, MSec); //ExtractFilePath(ParamStr(0)) +

  sTime := FormatDateTime('yyyy-mm-dd hh:mm:ss', Now);
  Label4.Caption := '新事件:'+ sTime;

  try

    SQLock.Enter;

    for i := LogMsgList.Count - 1 downto 0 do begin
      application.ProcessMessages;
      Data := LogMsgList.Strings[i];
      LogMsgList.Delete(i);
      sTime := FormatDateTime('yyyy-mm-dd hh:mm:ss', Now);
    
      Data := GetValidStr3 (Data, tmp, [#9]);
      Data := GetValidStr3 (Data, tmp, [#9]);
      Data := GetValidStr3 (Data, tmp, [#9]);

      Data := GetValidStr3 (Data, sAction, [#9]);
      Data := GetValidStr3 (Data, sMapName, [#9]);
      Data := GetValidStr3 (Data, sXX, [#9]);
      Data := GetValidStr3 (Data, sYY, [#9]);
      Data := GetValidStr3 (Data, sUserName, [#9]);
      Data := GetValidStr3 (Data, sItemName, [#9]);
      Data := GetValidStr3 (Data, sMakeIndex, [#9]);
      Data := GetValidStr3 (Data, sOpt1, [#9]);
      Data := GetValidStr3 (Data, sOpt2, [#9]);

      AdoQry.Close;
      AdoQry.SQL.Clear;
      AdoQry.SQL.Add('insert into tbl_userlog(FLD_ACTION, FLD_MAPNAME, FLD_CX, FLD_CY, FLD_USERNAME, FLD_ITEMNAME, FLD_ITEMMAKEINDEX, FLD_OPT1, FLD_OPT2, FLD_TIME) values(' +
        QuotedStr(sAction) + ',' +
        QuotedStr(sMapName) + ',' +
        QuotedStr(sXX) + ',' +
        QuotedStr(sYY) + ',' +
        QuotedStr(sUserName) + ',' +
        QuotedStr(sItemName) + ',' +
        QuotedStr(sMakeIndex) + ',' +
        QuotedStr(sOpt1) + ',' +
        QuotedStr(sOpt2) + ',' +
        QuotedStr(sTime) +  ')');
        AdoQry.Prepared;
        AdoQry.ExecSQL;
    end;
  finally
    SQLock.Leave;
    sTime := FormatDateTime('yyyy-mm-dd hh:mm:ss', Now);
    Label4.Caption := '保存完毕:'+ sTime;
  end;
  Timer1.Enabled := True;
end;

procedure TFrmLogData.MainMenu_LogDataClick(Sender: TObject);
begin
  FrmLogManage.Show;
end;

procedure TFrmLogData.MyMessage(var MsgData: TWmCopyData);
var
  sData: string;
  //ProgramType: TProgamType;
  wIdent: Word;
begin
  wIdent := HiWord(MsgData.From);
  //  ProgramType:=TProgamType(LoWord(MsgData.From));
//  sData := StrPas(MsgData.CopyDataStruct^.lpData);
  case wIdent of //
    GS_QUIT: begin
        m_boRemoteClose := True;
        CloseTimer.Enabled := True;
        Close();
      end;
    1: ;
    2: ;
    3: ;
  end; // case
end;

procedure TFrmLogData.StartTimerTimer(Sender: TObject);
var
  Conf: TIniFile;
  boMinimize: Boolean;
begin
  StartTimer.Enabled := False;
  Conf := TIniFile.Create('.\LogData.ini');
  if Conf <> nil then begin
    sBaseDir := Conf.ReadString('Setup', 'BaseDir', sBaseDir);
    sServerName := Conf.ReadString('Setup', 'Caption', sServerName);
    sServerName := Conf.ReadString('Setup', 'ServerName', sServerName);
    nServerPort := Conf.ReadInteger('Setup', 'Port', nServerPort);
    boMinimize := Conf.ReadBool('Setup', 'Minimize', False);
    Conf.Free;
  end;
  Caption := sCaption + ' (' + sServerName + ')' + '(SQL版)';
  IdUDPServerLog.DefaultPort := nServerPort;
  IdUDPServerLog.Active := True;
  if boMinimize then Application.Minimize;
  SendGameCenterMsg(SG_STARTOK, '日志服务器启动完成...');
end;

function TFrmLogData.connectdb: Boolean;
begin
  Result := false;
  FConnFile.LoadFromFile('!dbsql.txt');
  FConnInfo := FConnFile.Values['ConnectInfo'];

  AdoCon.Close;
  AdoCon.ConnectionString := FConnInfo;
  AdoCon.LoginPrompt := false;
  AdoCon.Connected := true;
  if not AdoCon.Connected then begin
    ShowMessage('数据库联接失败!');
    Exit;
  end;

  try
    AdoQry.Close;
    AdoQry.Connection := AdoCon;
    AdoQry.SQL.Clear;
    AdoQry.SQL.Add('select top 1 * from TBL_USERLOG');
    AdoQry.Open;
    Result := true;
  except
    ShowMessage('数据查询失败:'+AdoCon.Errors[0].Description);
  end;
end;

//procedure TFrmLogData.est1Click(Sender: TObject);
//var
//  i : integer;
//  s: string;
//begin
//  s := '1'#9'0'#9'0'#9'15'#9'0'#9'164'#9'176'#9'半兽战士'#9'炼狱'#9'223519714'#9'0'#9'0';
//  SQLock.Enter;
//  for i := 0 to 9999 do
//  LogMsgList.Add(s);
//
//  SQLock.Leave;
//end;

end.

